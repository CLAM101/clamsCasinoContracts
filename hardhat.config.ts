import { HardhatUserConfig, task } from "hardhat/config";

import * as dotenv from "dotenv";
import "@nomicfoundation/hardhat-toolbox";
import "@nomicfoundation/hardhat-verify";
import "hardhat-gas-reporter";
dotenv.config();

task("balance", "Prints an account's balance")
  .addParam("account", "The account's address")
  .setAction(async (taskArgs) => {
    const balance = await ethers.provider.getBalance(taskArgs.account);

    console.log(ethers.formatEther(balance), "ETH");
  });

task("accounts", "Prints test accounts").setAction(async (taskArgs) => {
  const accounts = await ethers.getSigners();

  console.log("accounts", accounts);
});

task("randomWords", "Simulate randomness fulfillment").setAction(
  async (taskArgs) => {
    try {
      const v2Mock = await ethers.getContractFactory("VRFCoordinatorV2Mock");
      const mock = v2Mock.attach("0xe7f1725e7734ce288f8367e1bb143e90bb3f0512");

      await mock.fundSubscription(1, 1000000000000000);
      // Replace with the actual request ID generated by your game contract
      const requestId = "YOUR_REQUEST_ID";

      // Simulate randomness fulfillment
      const sudoRandomNumGame2 = [Math.trunc(Math.random() * 10000000)];

      const confirmationGame2 = await mock.fulfillRandomWordsWithOverride(
        2,
        "0xdc64a140aa3e981100a9beca4e685f962f0cf6c9",
        sudoRandomNumGame2,
        { gasLimit: 300000 } // Adjust the gas limit as needed
      );

      await confirmationGame2.wait();

      console.log("Randomness fulfilled successfully");
    } catch (error) {
      console.error("Error simulating randomness fulfillment:", error);
    }
  }
);

const deployerPrivateKey = process.env.DEPLOYER_ACCOUNT_PRIVATE_KEY || "";

const config: HardhatUserConfig = {
  solidity: "0.8.7",

  gasReporter: {
    enabled: true,
    currency: "USD", // The currency to use for gas cost calculation
    gasPrice: 100, // The gas price in gwei (can be changed)
  },
  networks: {
    hardhat: {
      chainId: 1337,
    },

    goerli: {
      url: process.env.GOERLI_ALCHEMYURL,
      accounts: [deployerPrivateKey],
    },

    polygon_mumbai: {
      url: process.env.MUMBAI_URL,
      accounts: [deployerPrivateKey],
    },
    ganache: {
      url: "http://172.31.112.1:7545",
      chainId: 5777,
    },
  },
  etherscan: {
    apiKey: process.env.ETHERSCAN_API_KEY,
  },
};

export default config;
